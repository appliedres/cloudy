name: Go Testing

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  check-go-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Install Required Go Version
        run: |
          GO_VERSION=$(awk '/^go / {print $2}' go.mod)
          echo "Using Go version: $GO_VERSION"
          wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          go version

  go-vet:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Install Required Go Version
        run: |
          GO_VERSION=$(awk '/^go / {print $2}' go.mod)
          echo "Using Go version: $GO_VERSION"
          wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          go version

      - name: Go Vet
        run: go vet ./...

  go-fmt:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Install Required Go Version
        run: |
          GO_VERSION=$(awk '/^go / {print $2}' go.mod)
          echo "Using Go version: $GO_VERSION"
          wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          go version

      - name: Check gofmt
        run: |
          EXCLUDE_DIRS=("client" "models" "restapi" "clientmtls")
          EXCLUDE_PATTERN=$(printf "|%s" "${EXCLUDE_DIRS[@]}")
          EXCLUDE_PATTERN=${EXCLUDE_PATTERN:1}
          GO_FILES=$(find . -type f -name "*.go" | grep -vE "($EXCLUDE_PATTERN)")
          UNFORMATTED_FILES=$(echo "$GO_FILES" | xargs gofmt -l || true)
          if [ -n "$UNFORMATTED_FILES" ]; then
            echo "gofmt found unformatted files:"
            echo "$UNFORMATTED_FILES"
            exit 1
          else
            echo "All Go files are properly formatted."
          fi

  go-vulncheck:
    runs-on: ubuntu-latest
    name: Run govulncheck
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Install Required Go Version
        run: |
          GO_VERSION=$(awk '/^go / {print $2}' go.mod)
          echo "Using Go version: $GO_VERSION"
          wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          go version

      - id: govulncheck
        uses: golang/govulncheck-action@v1
        with:
           go-version-input: ${{ env.GO_VERSION }}
           go-package: ./...

  go-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source
        uses: actions/checkout@v4

      - name: Install Required Go Version
        run: |
          GO_VERSION=$(awk '/^go / {print $2}' go.mod)
          echo "Using Go version: $GO_VERSION"
          wget https://go.dev/dl/go${GO_VERSION}.linux-amd64.tar.gz
          sudo rm -rf /usr/local/go && sudo tar -C /usr/local -xzf go${GO_VERSION}.linux-amd64.tar.gz
          echo "/usr/local/go/bin" >> $GITHUB_PATH
          go version

      - name: Go Tidy
        run: go mod tidy && git diff --exit-code

      - name: Go Mod Download
        run: go mod download

      - name: Go Mod Verify
        run: go mod verify

      - name: Go Build
        run: go build -o /dev/null ./...

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Go Test with JUnit Report
        run: gotestsum --junitfile junit-report.xml -- -v -count=1 -shuffle=on -coverprofile=coverage.txt ./...

      - name: Upload Test Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: junit-report
          path: junit-report.xml

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action/macos@v2
        if: always()
        with:
          files: junit-report.xml

      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: coverage.txt