// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMachineActivity virtual machine activity
//
// swagger:model VirtualMachineActivity
type VirtualMachineActivity struct {

	// the time the activity ended
	// Format: datetime
	EndTimestamp strfmt.DateTime `json:"endTimestamp,omitempty"`

	// id of the activity (timestamp+vmid+activtyname)
	ID string `json:"id,omitempty"`

	// name of the activity
	Name string `json:"name,omitempty"`

	// the time the activity started
	// Format: datetime
	StartTimestamp strfmt.DateTime `json:"startTimestamp,omitempty"`
}

// Validate validates this virtual machine activity
func (m *VirtualMachineActivity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineActivity) validateEndTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.EndTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("endTimestamp", "body", "datetime", m.EndTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineActivity) validateStartTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.StartTimestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("startTimestamp", "body", "datetime", m.StartTimestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this virtual machine activity based on context it is used
func (m *VirtualMachineActivity) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachineActivity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachineActivity) UnmarshalBinary(b []byte) error {
	var res VirtualMachineActivity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
