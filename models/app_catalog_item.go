// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppCatalogItem app catalog item
//
// swagger:model AppCatalogItem
type AppCatalogItem struct {

	// Minimum CPU requirement for the app, expressed in cores.
	CPURequirement float64 `json:"CPURequirement,omitempty"`

	// Minimum amount of RAM required for the app, expressed in GB.
	RAMRequirement float64 `json:"RAMRequirement,omitempty"`

	// Boolean indicating if multiple versions of this app are allowed to coexist.
	AllowMutlipleVersions bool `json:"allowMutlipleVersions,omitempty"`

	// Indicates whether the app is approved for global use. Only relevant if the app is restricted.
	ApprovedGlobally bool `json:"approvedGlobally,omitempty"`

	// List of user IDs that are approved to access this app if restricted.
	ApprovedUserIDs []string `json:"approvedUserIDs"`

	// Path to the banner image file used for this app.
	BannerPath string `json:"bannerPath,omitempty"`

	// Array of app catalog item IDs that this app depends on to function.
	DependentAppItemIDs []string `json:"dependentAppItemIDs"`

	// A short description of what this app does.
	Description string `json:"description,omitempty"`

	// Boolean value indicating whether this app is enabled or not.
	Enabled bool `json:"enabled,omitempty"`

	// Boolean indicating if the app is featured in the catalog.
	Featured bool `json:"featured,omitempty"`

	// Path to the icon image file for this app.
	IconPath string `json:"iconPath,omitempty"`

	// Unique identifier for the app catalog item.
	ID string `json:"id,omitempty"`

	// Array of app catalog item IDs that are incompatible with this app.
	IncompatibleAppItemIDs []string `json:"incompatibleAppItemIDs"`

	// List of VM locations where this app is available.
	Locations []*VirtualMachineLocation `json:"locations"`

	// Indicates if the app is enabled for use with multisession Virtual Machines.
	MultisessionEnabled bool `json:"multisessionEnabled,omitempty"`

	// Name of the app in the catalog.
	Name string `json:"name,omitempty"`

	// Additional notes related to this app, useful for documentation purposes.
	Notes string `json:"notes,omitempty"`

	// Boolean indicating if the app requires GPU resources.
	RequiresGPU bool `json:"requiresGPU,omitempty"`

	// Indicates if the app is restricted to certain users or groups. If true, it is not available globally.
	Restricted bool `json:"restricted,omitempty"`

	// List of group IDs restricted from accessing the app.
	RestrictedGroupIds []string `json:"restrictedGroupIds"`

	// List of user IDs that are restricted from accessing the app.
	RestrictedUserIds []string `json:"restrictedUserIds"`

	// Array of paths to screenshot images, showcasing the app’s interface.
	ScreenshotPaths []string `json:"screenshotPaths"`

	// List of tags for categorizing or describing the app.
	Tags map[string]*string `json:"tags,omitempty"`

	// Defines the type of app—either 'web' for web-based apps or 'vm' for virtual machine apps.
	// Enum: [web vm]
	Type string `json:"type,omitempty"`

	// List of IDs of the different versions associated with this app.
	VersionIds []string `json:"versionIds"`

	// URL of the official website for this app.
	WebsiteURL string `json:"websiteURL,omitempty"`
}

// Validate validates this app catalog item
func (m *AppCatalogItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLocations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppCatalogItem) validateLocations(formats strfmt.Registry) error {
	if swag.IsZero(m.Locations) { // not required
		return nil
	}

	for i := 0; i < len(m.Locations); i++ {
		if swag.IsZero(m.Locations[i]) { // not required
			continue
		}

		if m.Locations[i] != nil {
			if err := m.Locations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var appCatalogItemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["web","vm"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		appCatalogItemTypeTypePropEnum = append(appCatalogItemTypeTypePropEnum, v)
	}
}

const (

	// AppCatalogItemTypeWeb captures enum value "web"
	AppCatalogItemTypeWeb string = "web"

	// AppCatalogItemTypeVM captures enum value "vm"
	AppCatalogItemTypeVM string = "vm"
)

// prop value enum
func (m *AppCatalogItem) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, appCatalogItemTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AppCatalogItem) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this app catalog item based on the context it is used
func (m *AppCatalogItem) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateLocations(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppCatalogItem) contextValidateLocations(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Locations); i++ {

		if m.Locations[i] != nil {
			if err := m.Locations[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locations" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppCatalogItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppCatalogItem) UnmarshalBinary(b []byte) error {
	var res AppCatalogItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
