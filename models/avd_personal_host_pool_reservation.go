// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AvdPersonalHostPoolReservation \ Represents a reservation of a PERSONAL host pool for a specific VM. Ensures that while a VM is creating, it has a dedicated host pool reserved. Prevents the user from making multiple VMs/SessionHosts in a single host pool.
//
// swagger:model AvdPersonalHostPoolReservation
type AvdPersonalHostPoolReservation struct {

	// Unique key for the reservation (e.g., "avdManagerName::HostPoolName::userID")
	ID string `json:"ID,omitempty"`

	// The AVD manager name handling this reservation
	AvdManager string `json:"avdManager,omitempty"`

	// The reserved host pool name for the VM
	HostPoolName string `json:"hostPoolName,omitempty"`

	// Timestamp when the reservation was made
	// Format: date-time
	ReservedAt strfmt.DateTime `json:"reservedAt,omitempty"`

	// The user ID for whom the reservation is made
	UserID string `json:"userId,omitempty"`
}

// Validate validates this avd personal host pool reservation
func (m *AvdPersonalHostPoolReservation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReservedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AvdPersonalHostPoolReservation) validateReservedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.ReservedAt) { // not required
		return nil
	}

	if err := validate.FormatOf("reservedAt", "body", "date-time", m.ReservedAt.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this avd personal host pool reservation based on context it is used
func (m *AvdPersonalHostPoolReservation) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AvdPersonalHostPoolReservation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AvdPersonalHostPoolReservation) UnmarshalBinary(b []byte) error {
	var res AvdPersonalHostPoolReservation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
