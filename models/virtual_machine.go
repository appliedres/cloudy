// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMachine virtual machine
//
// swagger:model VirtualMachine
type VirtualMachine struct {

	// history of the virtual machine's activity.
	Activity []*VirtualMachineActivity `json:"activity"`

	// map of the ids of the apps (and version id if desired) installed on the virtual machine.
	Apps map[string]VirtualMachineAppDetail `json:"apps,omitempty"`

	// power state of the virtual machine (retrieved from the cloud).
	CloudState *VirtualMachineCloudState `json:"cloudState,omitempty"`

	// Remote desktop connection info
	Connect *VirtualMachineConnection `json:"connect,omitempty"`

	// id of the creator of the virtual machine
	CreatorID string `json:"creatorId,omitempty"`

	// the description of the virtual machine
	Description string `json:"description,omitempty"`

	// disks attached to the virtual machine.
	Disks []*VirtualMachineDisk `json:"disks"`

	// estimated cost total cost accumulated during the operation of the virtual machine (rolled up from family and disk)
	EstimatedCostAccumulated float64 `json:"estimatedCostAccumulated,omitempty"`

	// estimated cost per hour of the virtual machine (rolled up from family and disk)
	EstimatedCostPerHour float64 `json:"estimatedCostPerHour,omitempty"`

	// id of the virtual machine
	ID string `json:"id,omitempty"`

	// location where this virtual machine is running
	Location *VirtualMachineLocation `json:"location,omitempty"`

	// logs generated during virtual machine creation or the last modification.
	Logs []*VirtualMachineLogs `json:"logs"`

	// the name of the virtual machine
	Name string `json:"name,omitempty"`

	// nics attached to the virtual machine.
	Nics []*VirtualMachineNic `json:"nics"`

	// os disk attached to the virtual machine.
	OsDisk *VirtualMachineDisk `json:"osDisk,omitempty"`

	// status of actions being taken on the virtual machine (installing, updating)
	Status string `json:"status,omitempty"`

	// tags for grouping virtual machines (group, user, purpose, etc)
	Tags map[string]*string `json:"tags,omitempty"`

	// template associated with the virtual machine
	Template *VirtualMachineTemplate `json:"template,omitempty"`

	// id of the user of the virtual machine
	UserID string `json:"userId,omitempty"`
}

// Validate validates this virtual machine
func (m *VirtualMachine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActivity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateApps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnect(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNics(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachine) validateActivity(formats strfmt.Registry) error {
	if swag.IsZero(m.Activity) { // not required
		return nil
	}

	for i := 0; i < len(m.Activity); i++ {
		if swag.IsZero(m.Activity[i]) { // not required
			continue
		}

		if m.Activity[i] != nil {
			if err := m.Activity[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activity" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) validateApps(formats strfmt.Registry) error {
	if swag.IsZero(m.Apps) { // not required
		return nil
	}

	for k := range m.Apps {

		if err := validate.Required("apps"+"."+k, "body", m.Apps[k]); err != nil {
			return err
		}
		if val, ok := m.Apps[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apps" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apps" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) validateCloudState(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudState) { // not required
		return nil
	}

	if m.CloudState != nil {
		if err := m.CloudState.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudState")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validateConnect(formats strfmt.Registry) error {
	if swag.IsZero(m.Connect) { // not required
		return nil
	}

	if m.Connect != nil {
		if err := m.Connect.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connect")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) validateLocation(formats strfmt.Registry) error {
	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validateLogs(formats strfmt.Registry) error {
	if swag.IsZero(m.Logs) { // not required
		return nil
	}

	for i := 0; i < len(m.Logs); i++ {
		if swag.IsZero(m.Logs[i]) { // not required
			continue
		}

		if m.Logs[i] != nil {
			if err := m.Logs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) validateNics(formats strfmt.Registry) error {
	if swag.IsZero(m.Nics) { // not required
		return nil
	}

	for i := 0; i < len(m.Nics); i++ {
		if swag.IsZero(m.Nics[i]) { // not required
			continue
		}

		if m.Nics[i] != nil {
			if err := m.Nics[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) validateOsDisk(formats strfmt.Registry) error {
	if swag.IsZero(m.OsDisk) { // not required
		return nil
	}

	if m.OsDisk != nil {
		if err := m.OsDisk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osDisk")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) validateTemplate(formats strfmt.Registry) error {
	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this virtual machine based on the context it is used
func (m *VirtualMachine) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateActivity(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateApps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudState(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateConnect(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNics(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsDisk(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTemplate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachine) contextValidateActivity(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Activity); i++ {

		if m.Activity[i] != nil {
			if err := m.Activity[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("activity" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("activity" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) contextValidateApps(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Apps {

		if val, ok := m.Apps[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) contextValidateCloudState(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudState != nil {
		if err := m.CloudState.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudState")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudState")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) contextValidateConnect(ctx context.Context, formats strfmt.Registry) error {

	if m.Connect != nil {
		if err := m.Connect.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connect")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connect")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disks); i++ {

		if m.Disks[i] != nil {
			if err := m.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) contextValidateLocation(ctx context.Context, formats strfmt.Registry) error {

	if m.Location != nil {
		if err := m.Location.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) contextValidateLogs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Logs); i++ {

		if m.Logs[i] != nil {
			if err := m.Logs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("logs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("logs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) contextValidateNics(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Nics); i++ {

		if m.Nics[i] != nil {
			if err := m.Nics[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nics" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nics" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachine) contextValidateOsDisk(ctx context.Context, formats strfmt.Registry) error {

	if m.OsDisk != nil {
		if err := m.OsDisk.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("osDisk")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("osDisk")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachine) contextValidateTemplate(ctx context.Context, formats strfmt.Registry) error {

	if m.Template != nil {
		if err := m.Template.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachine) UnmarshalBinary(b []byte) error {
	var res VirtualMachine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
