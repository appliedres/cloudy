// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMachineTemplate defines the requirements for VM creation. Optional fields are defined as nullable and become pointers in go.
//
// swagger:model VirtualMachineTemplate
type VirtualMachineTemplate struct {

	// requested accelerated networking feature to use when selecting virtual machine family
	AcceleratedNetworking *bool `json:"acceleratedNetworking,omitempty"`

	// groups who can view this template during virtual machine creation.
	AllowedGroupIds []string `json:"allowedGroupIds"`

	// users who can view this template during virtual machine creation.
	AllowedUserIds []string `json:"allowedUserIds"`

	// list of the ids of the apps (and version id if desired) to be installed on the virtual machine.
	Apps map[string]VirtualMachineAppDetail `json:"apps,omitempty"`

	// the path to the banner to show for this template
	BannerPath string `json:"bannerPath,omitempty"`

	// requested CPU generation to use when selecting virtual machine family
	CPUGeneration *string `json:"cpuGeneration,omitempty"`

	// requested CPU vendor to use when selecting virtual machine family
	CPUVendor *string `json:"cpuVendor,omitempty"`

	// the description of the virtual machine template
	Description string `json:"description,omitempty"`

	// requested disks to be attached to the virtual machine.
	Disks []*VirtualMachineDisk `json:"disks"`

	// flag to determine featured sorting order when displayed on the dashboard
	Featured *bool `json:"featured,omitempty"`

	// the id of the virtual machine template used to start this template
	FromTemplateID string `json:"fromTemplateId,omitempty"`

	// requested GPU vendor to use when selecting virtual machine family
	GpuVendor *string `json:"gpuVendor,omitempty"`

	// the path to the icon to show for this template
	IconPath string `json:"iconPath,omitempty"`

	// the id of the virtual machine template
	ID string `json:"id,omitempty"`

	// local admin account
	LocalAdministratorID string `json:"localAdministratorId,omitempty"`

	// requested maximum number of virtual CPUs to use when selecting virtual machine family
	MaxCPU *int64 `json:"maxCpu,omitempty"`

	// requested maximum number of GPUs to use when selecting virtual machine family
	MaxGpu *int64 `json:"maxGpu,omitempty"`

	// requested maximum number of network devices to use when selecting virtual machine family
	MaxNic *int64 `json:"maxNic,omitempty"`

	// requested maximum amount of RAM in GB to use when selecting virtual machine family
	MaxRAM *float64 `json:"maxRam,omitempty"`

	// requested minimum number of virtual CPUs to use when selecting virtual machine family
	MinCPU *int64 `json:"minCpu,omitempty"`

	// requested minimum number of GPUs to use when selecting virtual machine family
	MinGpu *int64 `json:"minGpu,omitempty"`

	// requested minimum number of network devices to use when selecting virtual machine family
	MinNic *int64 `json:"minNic,omitempty"`

	// requested minimum amount of RAM in GB to use when selecting virtual machine family
	MinRAM *float64 `json:"minRam,omitempty"`

	// the name of the virtual machine template
	Name string `json:"name,omitempty"`

	// administrative notes concerning this template
	Notes string `json:"notes,omitempty"`

	// Requested operating system used in osBaseImageId.
	// Enum: [windows linux_deb linux_rhel]
	OperatingSystem string `json:"operatingSystem,omitempty"`

	// operating system base image id to be used when the virtual machine is created.
	// Format:
	//   marketplace:
	//     "marketplace::<Publisher>::<Offer>::<SKU>::<Version>[::PlanName]"
	//   gallery:
	//     "/subscriptions/<SubscriptionID>/resourceGroups/<ResourceGroup>/providers/Microsoft.Compute/galleries/<ImageGalleryName>/images/<ImageName>/versions/<version>"
	//
	OsBaseImageID string `json:"osBaseImageId,omitempty"`

	// id of the group who owns this template
	OwnerGroupID string `json:"ownerGroupId,omitempty"`

	// id of the user who owns this template
	OwnerUserID string `json:"ownerUserId,omitempty"`

	// special case security flag configuration
	SecurityProfile *VirtualMachineSecurityProfileConfiguration `json:"securityProfile,omitempty"`

	// size
	Size *VirtualMachineSize `json:"size,omitempty"`

	// tags for grouping virtual machines (group, user, purpose, etc)
	Tags map[string]*string `json:"tags,omitempty"`

	// the details used to determine when to automatically stop the virtual machine
	Timeout VirtualMachineTimeout `json:"timeout,omitempty"`

	// VDIs compatible with this template.
	VdiTypes []string `json:"vdiTypes"`

	// pools where this virtual machine can start.
	VirtualMachinePoolIds []string `json:"virtualMachinePoolIds"`
}

// Validate validates this virtual machine template
func (m *VirtualMachineTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateApps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperatingSystem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeout(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineTemplate) validateApps(formats strfmt.Registry) error {
	if swag.IsZero(m.Apps) { // not required
		return nil
	}

	for k := range m.Apps {

		if err := validate.Required("apps"+"."+k, "body", m.Apps[k]); err != nil {
			return err
		}
		if val, ok := m.Apps[k]; ok {
			if err := val.Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("apps" + "." + k)
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("apps" + "." + k)
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineTemplate) validateDisks(formats strfmt.Registry) error {
	if swag.IsZero(m.Disks) { // not required
		return nil
	}

	for i := 0; i < len(m.Disks); i++ {
		if swag.IsZero(m.Disks[i]) { // not required
			continue
		}

		if m.Disks[i] != nil {
			if err := m.Disks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var virtualMachineTemplateTypeOperatingSystemPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["windows","linux_deb","linux_rhel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualMachineTemplateTypeOperatingSystemPropEnum = append(virtualMachineTemplateTypeOperatingSystemPropEnum, v)
	}
}

const (

	// VirtualMachineTemplateOperatingSystemWindows captures enum value "windows"
	VirtualMachineTemplateOperatingSystemWindows string = "windows"

	// VirtualMachineTemplateOperatingSystemLinuxDeb captures enum value "linux_deb"
	VirtualMachineTemplateOperatingSystemLinuxDeb string = "linux_deb"

	// VirtualMachineTemplateOperatingSystemLinuxRhel captures enum value "linux_rhel"
	VirtualMachineTemplateOperatingSystemLinuxRhel string = "linux_rhel"
)

// prop value enum
func (m *VirtualMachineTemplate) validateOperatingSystemEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, virtualMachineTemplateTypeOperatingSystemPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VirtualMachineTemplate) validateOperatingSystem(formats strfmt.Registry) error {
	if swag.IsZero(m.OperatingSystem) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatingSystemEnum("operatingSystem", "body", m.OperatingSystem); err != nil {
		return err
	}

	return nil
}

func (m *VirtualMachineTemplate) validateSecurityProfile(formats strfmt.Registry) error {
	if swag.IsZero(m.SecurityProfile) { // not required
		return nil
	}

	if m.SecurityProfile != nil {
		if err := m.SecurityProfile.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityProfile")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineTemplate) validateSize(formats strfmt.Registry) error {
	if swag.IsZero(m.Size) { // not required
		return nil
	}

	if m.Size != nil {
		if err := m.Size.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("size")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineTemplate) validateTimeout(formats strfmt.Registry) error {
	if swag.IsZero(m.Timeout) { // not required
		return nil
	}

	if err := m.Timeout.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeout")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeout")
		}
		return err
	}

	return nil
}

// ContextValidate validate this virtual machine template based on the context it is used
func (m *VirtualMachineTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateApps(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDisks(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSecurityProfile(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSize(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeout(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineTemplate) contextValidateApps(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Apps {

		if val, ok := m.Apps[k]; ok {
			if err := val.ContextValidate(ctx, formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineTemplate) contextValidateDisks(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Disks); i++ {

		if m.Disks[i] != nil {
			if err := m.Disks[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("disks" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("disks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VirtualMachineTemplate) contextValidateSecurityProfile(ctx context.Context, formats strfmt.Registry) error {

	if m.SecurityProfile != nil {
		if err := m.SecurityProfile.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityProfile")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("securityProfile")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineTemplate) contextValidateSize(ctx context.Context, formats strfmt.Registry) error {

	if m.Size != nil {
		if err := m.Size.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("size")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("size")
			}
			return err
		}
	}

	return nil
}

func (m *VirtualMachineTemplate) contextValidateTimeout(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Timeout.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timeout")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("timeout")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachineTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachineTemplate) UnmarshalBinary(b []byte) error {
	var res VirtualMachineTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
