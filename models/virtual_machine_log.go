// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VirtualMachineLog virtual machine log
//
// swagger:model VirtualMachineLog
type VirtualMachineLog struct {

	// id of the log (timestamp+vmid)
	ID string `json:"id,omitempty"`

	// the log text
	Log string `json:"log,omitempty"`

	// the time the log was recorded
	// Format: datetime
	Timestamp strfmt.DateTime `json:"timestamp,omitempty"`

	// id of the vm associated with the log
	VMID string `json:"vmId,omitempty"`
}

// Validate validates this virtual machine log
func (m *VirtualMachineLog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VirtualMachineLog) validateTimestamp(formats strfmt.Registry) error {
	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := validate.FormatOf("timestamp", "body", "datetime", m.Timestamp.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this virtual machine log based on context it is used
func (m *VirtualMachineLog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VirtualMachineLog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VirtualMachineLog) UnmarshalBinary(b []byte) error {
	var res VirtualMachineLog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
