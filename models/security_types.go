// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SecurityTypes security types
//
// swagger:model SecurityTypes
type SecurityTypes string

func NewSecurityTypes(value SecurityTypes) *SecurityTypes {
	return &value
}

// Pointer returns a pointer to a freshly-allocated SecurityTypes.
func (m SecurityTypes) Pointer() *SecurityTypes {
	return &m
}

const (

	// SecurityTypesNone captures enum value "None"
	SecurityTypesNone SecurityTypes = "None"

	// SecurityTypesConfidentialVM captures enum value "ConfidentialVM"
	SecurityTypesConfidentialVM SecurityTypes = "ConfidentialVM"

	// SecurityTypesTrustedLaunch captures enum value "TrustedLaunch"
	SecurityTypesTrustedLaunch SecurityTypes = "TrustedLaunch"
)

// for schema
var securityTypesEnum []interface{}

func init() {
	var res []SecurityTypes
	if err := json.Unmarshal([]byte(`["None","ConfidentialVM","TrustedLaunch"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		securityTypesEnum = append(securityTypesEnum, v)
	}
}

func (m SecurityTypes) validateSecurityTypesEnum(path, location string, value SecurityTypes) error {
	if err := validate.EnumCase(path, location, value, securityTypesEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this security types
func (m SecurityTypes) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSecurityTypesEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this security types based on context it is used
func (m SecurityTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
