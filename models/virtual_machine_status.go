// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// VirtualMachineStatus The overall status of the VM used to track readiness. A status should be set when taking an action on the VM,
// such as installing software, configuring AVD, or updating the cloud VM itself. VM should be marked 'ready' when actions
// are complete and the user can access the VM.
//
//
// swagger:model VirtualMachineStatus
type VirtualMachineStatus string

func NewVirtualMachineStatus(value VirtualMachineStatus) *VirtualMachineStatus {
	return &value
}

// Pointer returns a pointer to a freshly-allocated VirtualMachineStatus.
func (m VirtualMachineStatus) Pointer() *VirtualMachineStatus {
	return &m
}

const (

	// VirtualMachineStatusReady captures enum value "ready"
	VirtualMachineStatusReady VirtualMachineStatus = "ready"

	// VirtualMachineStatusCreating captures enum value "creating"
	VirtualMachineStatusCreating VirtualMachineStatus = "creating"

	// VirtualMachineStatusUpdating captures enum value "updating"
	VirtualMachineStatusUpdating VirtualMachineStatus = "updating"

	// VirtualMachineStatusDeleting captures enum value "deleting"
	VirtualMachineStatusDeleting VirtualMachineStatus = "deleting"

	// VirtualMachineStatusDeleted captures enum value "deleted"
	VirtualMachineStatusDeleted VirtualMachineStatus = "deleted"
)

// for schema
var virtualMachineStatusEnum []interface{}

func init() {
	var res []VirtualMachineStatus
	if err := json.Unmarshal([]byte(`["ready","creating","updating","deleting","deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		virtualMachineStatusEnum = append(virtualMachineStatusEnum, v)
	}
}

func (m VirtualMachineStatus) validateVirtualMachineStatusEnum(path, location string, value VirtualMachineStatus) error {
	if err := validate.EnumCase(path, location, value, virtualMachineStatusEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this virtual machine status
func (m VirtualMachineStatus) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateVirtualMachineStatusEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this virtual machine status based on context it is used
func (m VirtualMachineStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
